$version 13.04

// This is the root component of the entire GUI application.
$rect <-50,20,150,60>
$output false
class Application : Core::Root
{
  $rect <960,320,1160,360>
  inherited property Bounds = <0,0,340,590>;

  $rect <20,20,160,60>
  object Views::Text TextTxt
  {
    preset StackingPriority = 3;
    preset Bounds = <1250,21,1448,86>;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "result here";
    preset Font = Application::DigitalResFont;
    preset Color = #0D1A38FF;
  }

  $rect <20,20,160,60>
  object Application::NumKeyBtns Keypad
  {
    preset StackingPriority = 2;
    preset Bounds = <20,129,320,569>;
  }

  $rect <20,20,160,60>
  object Views::Rectangle OutputBgk
  {
    preset StackingPriority = 2;
    preset Bounds = <20,30,320,105>;
    preset ColorBL = #99A8B7FF;
    preset ColorBR = #99A8B7FF;
    preset ColorTR = #FFFFFFFF;
    preset ColorTL = #FFFFFFFF;
    preset Radius = 5;
    preset Color = #CFE4F8FF;
  }

  $rect <20,20,160,60>
  object Views::Border Border
  {
    preset StackingPriority = 2;
    preset Bounds = <20,30,320,105>;
    preset Radius = 5;
    preset Width = 2;
    preset Color = #030324FF;
  }

  $rect <410,50,610,90>
  object Core::KeyPressHandler KeyHandler
  {
    preset OnPress = CalculateExpression;
    preset OnHold = null;
  }

  $rect <410,100,610,140>
  slot CalculateExpression
  {
    var string str = "";
    var string temp = "";
    var int32 cursorPosition = Text.String.length - 1; 

    if(KeyHandler.CharCode != '\0')
    {  
      str = KeyHandler.CharCode;
    }
    else
    {
      str = Keypad.keyString;
    }

    if(Text.String == "result here" || str == "C")
    {
      ResetVariables();
    }

    if(KeyHandler.Code == Core::KeyCode.Left)
    {
      if (cursorPosition > 0)
      {
        cursorPosition--; 
      }
    }

    if(KeyHandler.Code == Core::KeyCode.Right)
    {
      if (cursorPosition < Text.String.length)
      {
        cursorPosition++; 
      }
    }

    if (str != "=" && str != "C")
    {
        var char lastChar = Text.String[Text.String.length - 1];
        if (str == "(")
        {
            if (Text.String.length > 0)
            {
                if (IsDigit(lastChar) || lastChar == ')')
                {
                    temp = Text.String + "x" + str;
                }
                else
                {
                    temp = Text.String + str;
                }
            }
            else
            {
                temp = Text.String + str;
            }
        }
        else if(str == "b" || KeyHandler.Code == Core::KeyCode.Backspace)
        {
            temp = Text.String.remove(Text.String.length - 1, 1);
        }
        else if(IsDigit(str[0]))
        {
           if(lastChar == ')')
           {
               temp = Text.String + "x" + str;
           }
           else
           {
               temp = Text.String + str;
           }
        }
        else
        {
            temp = Text.String + str;
        }
        
        Text.String = temp;
        cursorPosition++;
    }

    if (str == "=")
    {
      if(IsExpressionValid(Text.String))
      {
        var float result = 0.0;
        var string input = Text.String;
        trace input;
        $if !$prototyper                    
        native
        {
          result = EvaluateRPN(input);
        }
        $endif
        trace result;
        Text.String = ExecuteOperation(Text.String);
        cursorPosition = Text.String.length; // Reset cursor to end after operation
      }
    }

  }

  // Key Event Handler
  note group KeyHandlerNote
  {
    attr Bounds = <360,10,650,170>;
  }

  $rect <20,20,160,60>
  object Views::Rectangle Bgk
  {
    preset Bounds = <0,0,340,590>;
    preset Color = #E2E6E9FF;
  }

  $rect <20,20,160,60>
  object Application::ResultTxtEd Text
  {
    preset StackingPriority = 3;
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <20,35,320,100>;
    preset WrapText = false;
    preset Alignment = Views::TextAlignment[AlignHorzRight, AlignVertCenter];
    preset String = "result here";
    preset Font = Application::DigitalResFont;
  }

  $rect <410,240,610,280>
  method float ExecTwoOp( arg float first, arg float second, arg string op )
  {
    var float res = 0.0;

    switch (op[0])
          {
            case '+':
              res = first + second;
            case '-':
              res = first - second;
            case 'x':
              res = first * second;
            case '/':
              if (second != 0.0)
                res = first / second;
              else
              { 
                if(first < 0.0)
                  {res = float_infn();}
                if(first > 0.0)
                  {res = float_infp();}
                if(first == 0.0)
                  {res = float_nan();}
              }
            case '%':
              { 
                var float temp = first * second;
                res = temp / 100;     
              }
            case '^': 
              res =  math_pow(first, second);
            default:
              res = 0.0;
          }

    return res;
  }

  $rect <410,340,610,380>
  method void ResetVariables()
  {
    Text.String = "";
    //Keypad.ParanthesisOpen = false;
  }

  $rect <670,20,870,60>
  method bool IsOperator( arg char op )
  {
    return ( op == '+' || op == '-' || op == 'x' || op == '/' ||  op == '%' || op == '^');
    //  return true;

    //return false;
  }

  // Operation Handler
  note group Note
  {
    attr Bounds = <360,200,650,400>;
  }

  $rect <930,30,1130,70>
  method int32 GetPriorityOfOperator( arg char op )
  {
    var int32 priority = 0;

    switch (op)
          {
            case '+':
              priority = 1;
            case '-':
              priority = 1;
            case 'x':
              priority = 2;
            case '/':
              priority = 2;
            case '%':
             priority = 3;
            case '^': 
              priority = 3;
            default:
              priority = 1;
          }

    return priority;
  }

  $rect <910,80,1180,120>
  method Application::Pair GetSubexpressionInParentheses( arg int32 startPos, arg string expression )
  {
    var string subexpression;
    var int32 endPos;
    var Application::Pair res = new Application::Pair;

    var int32 i = startPos + 1;

    if(expression != "")
    {
      for( ; i < expression.length; i++)
      {
        if(expression[i] != ')')
        {
          subexpression += expression[i];
          endPos = i;
        }
        else
        {  
          break;    
        }
      }
    } 

    res.EndPosition = endPos;
    res.Subexpression = subexpression;
    res.IdentifiedNumber = 0.0;

    return res; 
  }

  $rect <930,140,1155,180>
  method Application::Pair GetNumberFromPosition( arg int32 startPos, arg string expression )
  {
    var int32 endPos;
    var Application::Pair res = new Application::Pair;
    var string nrStr;
    var int32 i = startPos;

    if(expression != "")
    {
      for( ; i < expression.length; i++)
      {
        if(!IsOperator(expression[i]) && IsDigit(expression[i]))
        {  
          nrStr += expression[i];
          endPos = i;
        }
        else
        {  
          break;    
        }
      }
    } 

    res.EndPosition = endPos;
    res.Subexpression = "none";
    res.IdentifiedNumber = nrStr.parse_float(-1.0);
    return res; 
  }

  $rect <680,370,880,410>
  method bool IsExpressionValid( arg string expression )
  {
    // check for valid operators
    // check that operators are used correctly
    // correct paranthesis

    if (expression == "")
    {
         //signal onShowDialog;
         //7ErrDialog.ErrorText.String = "Expression is null.";
         //signal onOpenDialog;
         //ErrorDg.ErrorText.String = "Expression is null.";
         return false;
    }
    else
    {
        if(!CorrectParentheses(expression))
        {
           //signal onShowDialog;
           //ErrDialog.ErrorText.String = "Parantheses used incorrectly.";
           signal onOpenDialog;
           ErrorDg.ErrorText.String = "Parantheses used incorrectly.";
           return false;
        }
        else if(!OperatorsCorrectlyUsed(expression))
        {
           //signal onShowDialog;
           //ErrDialog.ErrorText.String = "Operators used incorrectly.";
           signal onOpenDialog;
           ErrorDg.ErrorText.String = "Operators used incorrectly.";
           return false;
        }
        else if (!CharactersAllowed(expression))
        {
           //signal onShowDialog;
           //ErrDialog.ErrorText.String = "Expression contains characters that are not allowed.";
           signal onOpenDialog;
           ErrorDg.ErrorText.String = "Expression contains characters that are not allowed.";
           return false;
        }
    }

    return true;
  }

  $rect <680,320,880,360>
  method bool IsDigit( arg char op )
  {
    return ((op >= '0') && (op <= '9') || op == '.');
    //  return true;

    //return false;
  }

  $rect <670,170,870,210>
  method bool SubexprHasOnlyDigits( arg string expression )
  {
    var int32 i = 0;
    var int32 counter = 0;
    var bool validator = false;

    if(expression != "")
    {
      for( ; i < expression.length; i++)
      {
        if(IsDigit(expression[i]))
          validator = true;
        else if(expression[i] == '-')
          counter++;
        else
          validator = false;
      }
    }

    if( validator == true && (counter == 1 || counter == 0))
      return true;

    return false;
  }

  $rect <950,190,1150,230>
  method float GetNegativeNumber( arg string expression )
  {
    var string nrStr = "";
    var int32 i = 0;

    if(expression != "")
    {
      for( ; i < expression.length ; i++)
      {
        nrStr += expression[i];
      }
    }

    return nrStr.parse_float(-1.0);
  }

  $rect <680,220,880,260>
  method bool CorrectParentheses( arg string expression )
  {
    var int32 size = Application::MAX_SIZE;
    array char stack[Application::MAX_SIZE];
    var int32 top = -1;
    var int32 i = 0;

    if(expression != "")
    {
      for( ; i < expression.length; i++)
      {
        var char c = expression[i];

        if(c == '(')
        {
          if(top < size - 1)
          {
            stack[++top] = c;
          }
          else
          {
            return false;   
          }
        }
        else if(c == ')')
        {
          if(top == -1)
          {
            return false;
          }
          else
          {
            top--;
          }
        }  
      }
    }

    return (top == -1);
  }

  $rect <680,270,890,310>
  method bool OperatorsCorrectlyUsed( arg string expression )
  {
    var int32 i = 0;

    if(expression != "")
    {  
      for ( ; i < expression.length; i++)
      {
       if (i == 0)
        {
          if (!((expression[i] >= '0' && expression[i] <= '9') || expression[i] == '-' || expression[i] == '('))
          {
            return false; 
          }
        }
        else
        {
          if (IsOperator(expression[i]) && IsOperator(expression[i - 1]))
          {
            return false; 
          }
          
          if (i == expression.length - 1 && IsOperator(expression[i]))
          {
            return false;  
          }
        }
      }
    }

    return true;
  }

  $rect <670,70,870,110>
  method bool IsParenthesis( arg char op )
  {
      if( op == '(' || op == ')')
      return true;

    return false;
  }

  $rect <952,400,1152,440>
  var Application::ErrorDialog ErrDialog = null;

  $rect <950,446,1150,486>
  slot onShowDialog
  {
    ErrDialog = new Application::ErrorDialog;

    ErrDialog.Bounds.x = 45;
    ErrDialog.Bounds.y = 185;
    ErrDialog.StackingPriority = 3;

    ErrDialog.OnCloseDialog = onCloseDialog;

    Add(ErrDialog, 0);
    BeginModal(ErrDialog);
  }

  $rect <950,486,1150,526>
  slot onCloseDialog
  {
    EndModal(ErrDialog);
    Remove(ErrDialog);
    ErrDialog = null;
  }

  $rect <670,120,870,160>
  method bool CharactersAllowed( arg string expression )
  {
    var int32 i = 0;

    for( ; i < expression.length; i++)
    {
      if (IsOperator(expression[i]) == false && IsParenthesis(expression[i]) == false && IsDigit(expression[i]) == false)
        return false;
    }

    return true;
  }

  $rect <410,290,610,330>
  method float ExecuteOperation( arg string expression )
  {
    var float firstOp = 0.0;
    var float secondOp = 0.0;
    var float res = 0.0;
    var int32 i = 0;
    var Application::Pair pair = new Application::Pair;
    var float intermediate = 0.0;
    var bool firstSet = false;
    var bool secondSet = false;
    var bool intermediateSet = false;
    var char op = '\0';

    for (; i < expression.length; i++) 
    {
      if (expression[i] == '(') 
      {
        pair = GetSubexpressionInParentheses(i, expression);
        intermediate = ExecuteOperation(pair.Subexpression);
        intermediateSet = true;

        i = pair.EndPosition;
        continue;
      }

      if (expression[i] == ')')
         continue;

      if (IsDigit(expression[i]))
      {
         pair = GetNumberFromPosition(i, expression);
         i = pair.EndPosition;

         if (!firstSet && !secondSet && !intermediateSet)
         {
           firstOp = pair.IdentifiedNumber;
           firstSet = true;
           continue;
         }

         if (!firstSet && !secondSet && intermediateSet) 
         {
           firstOp = intermediate;
           intermediate = 0.0;
           firstSet = true;
           intermediateSet = false;
         }

          if (firstSet && !secondSet && !intermediateSet)
          {
            secondOp = pair.IdentifiedNumber;
            secondSet = true;
          }

          if (firstSet && !secondSet && intermediateSet)
          {
            secondOp = intermediate;
            intermediate = 0.0;      
            secondSet = true;
            intermediateSet = false;
          }

          if (firstSet && secondSet && op != '\0')
          {
            res = ExecTwoOp(firstOp, secondOp, op);
            firstOp = 0.0;
            secondOp = 0.0;
            firstSet = false;
            secondSet = false;
            op = '\0';
          }
          continue;
        }

        if (IsOperator(expression[i])) 
        {
          op = expression[i];
        }
      }

    return res;
  }

  $rect <680,-30,880,10>
  method bool IsWhiteSpace( arg char op )
  {
    return (op == ' ' || op == '\t');
  }

  $rect <20,20,160,60>
  object Application::ErrorDialog ErrorDg
  {
    preset StackingPriority = 3;
    preset Bounds = <-270,207,-20,307>;
    preset Visible = false;
  }

  $rect <430,450,630,490>
  slot onOpenDialog
  {
    sender; /* the method is called from the sender object */
  }

  $rect <430,500,630,540>
  slot onDialogHandled
  {
    ErrorDg.Bounds.x = -270;
    ErrorDg.Visible = false;
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Bounds
  $member TextTxt
  $member KeyHandlerNote
  $member Bgk
  $member OutputBgk
  $member Border
  $member Keypad
  $member KeyHandler
  $member CalculateExpression
  $member Text
  $member ExecTwoOp
  $member ResetVariables
  $member IsOperator
  $member Note
  $member GetPriorityOfOperator
  $member GetSubexpressionInParentheses
  $member GetNumberFromPosition
  $member IsExpressionValid
  $member IsDigit
  $member SubexprHasOnlyDigits
  $member GetNegativeNumber
  $member CorrectParentheses
  $member OperatorsCorrectlyUsed
  $member IsParenthesis
  $member ErrDialog
  $member onShowDialog
  $member onCloseDialog
  $member CharactersAllowed
  $member ExecuteOperation
  $member IsWhiteSpace
  $member ErrorDg
  $member onOpenDialog
  $member onDialogHandled
}

$rect <480,20,680,60>
$output false
resource Resources::Font NumFont
{
  attr fontname FontName = Book Antiqua;
  attr fontheight Height = 50;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <480,120,680,160>
$output false
resource Resources::Font DigitalResFont
{
  attr fontname FontName = Digital-7;
  attr fontheight Height = 60;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <-50,120,150,160>
$output false
class NumKeyBtns : Core::Group
{
  $rect <340,360,540,400>
  inherited property Bounds = <0,0,300,440>;

  $rect <360,100,560,140>
  inherited method UpdateLayout()
  {
    // Always invoke the inherited method.
    super( aSize );

    /*

      HINT:

      This method exists for sophisticated layout calculation. Please note, that in 
      most cases it is completely sufficient to use the views property 'Layout' to
      determine how the view should behave when the component is resized.

    */

    /*

      TO DO:

      Put here the code to calculate new position and size of enclosed views. The
      current (new) size of the component itself is passed in the parameter aSize.
      For example:

        SomeView.Bounds = rect( 10, 10, aSize.x - 20, aSize.y - 20 );

    */
  }

  $rect <360,50,560,90>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited method.
    super(aState);
  }

  $rect <900,50,1140,90>
  object WidgetSet::PushButtonConfig DigitOpConfig
  {
    preset KeyCode = Core::KeyCode.NoKey;
    preset AccentColorFocused = #03040000;
    preset AccentColorDefault = #00000000;
    preset AccentLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset LabelColorActive = #8E6B74FF;
    preset LabelColorFocused = #8E6B74FF;
    preset LabelColorDisabled = #8E6B74FF;
    preset LabelColorDefault = #000000FF;
    preset LabelFont = Application::NumFont;
    preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::CustomBtn;
    preset FaceBitmapFocused = Application::CustomBtn;
    preset FaceBitmapDisabled = Application::CustomBtn;
    preset FaceBitmapDefault = Application::CustomBtn;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Two
  {
    preset Bounds = <80,150,150,220>;
    preset OnActivate = onActivateKey;
    preset Label = "2";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Three
  {
    preset Bounds = <151,150,221,220>;
    preset OnActivate = onActivateKey;
    preset Label = "3";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Four
  {
    preset Bounds = <10,220,80,290>;
    preset OnActivate = onActivateKey;
    preset Label = "4";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Five
  {
    preset Bounds = <80,220,150,290>;
    preset OnActivate = onActivateKey;
    preset Label = "5";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Six
  {
    preset Bounds = <150,220,220,290>;
    preset OnActivate = onActivateKey;
    preset Label = "6";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Seven
  {
    preset Bounds = <10,290,80,360>;
    preset OnActivate = onActivateKey;
    preset Label = "7";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Eight
  {
    preset Bounds = <80,290,150,360>;
    preset OnActivate = onActivateKey;
    preset Label = "8";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Nine
  {
    preset Bounds = <150,290,220,360>;
    preset OnActivate = onActivateKey;
    preset Label = "9";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Zero
  {
    preset Bounds = <80,360,150,430>;
    preset OnActivate = onActivateKey;
    preset Label = "0";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Clear
  {
    preset Bounds = <10,7,80,77>;
    preset OnActivate = onActivateKey;
    preset Label = "C";
    preset Appearance = MultiplyConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Equals
  {
    preset Bounds = <222,360,294,428>;
    preset OnActivate = onActivateKey;
    preset Label = "=";
    preset Appearance = EqualsConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Plus
  {
    preset Bounds = <222,290,292,360>;
    preset OnActivate = onActivateKey;
    preset Label = "+";
    preset Appearance = DigitOpBoldConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Minus
  {
    preset Bounds = <223,220,293,290>;
    preset OnActivate = onActivateKey;
    preset Label = "-";
    preset Appearance = MultiplyConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Multiply
  {
    preset Bounds = <221,150,291,220>;
    preset OnActivate = onActivateKey;
    preset Label = "x";
    preset Appearance = MultiplyConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Divide
  {
    preset Bounds = <222,80,292,150>;
    preset OnActivate = onActivateKey;
    preset Label = "/";
    preset Appearance = DivideConfig;
  }

  $rect <20,20,160,60>
  object Views::Border Border
  {
    preset StackingPriority = -1;
    preset Bounds = <0,1,300,440>;
    preset Radius = 5;
    preset Width = 2;
    preset Color = #030324FF;
  }

  $rect <900,300,1140,340>
  object WidgetSet::PushButtonConfig EqualsConfig
  {
    preset OnUpdate = null;
    preset KeyCode = Core::KeyCode.Enter;
    preset LabelColorActive = #FFFCFEFF;
    preset LabelColorFocused = #FFFCFEFF;
    preset LabelColorDisabled = #FFFCFEFF;
    preset LabelColorDefault = #990002FF;
    preset LabelFont = Application::EqFont;
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::EqualsBtn;
    preset FaceBitmapFocused = Application::EqualsBtn;
    preset FaceBitmapDisabled = Application::EqualsBtn;
    preset FaceBitmapDefault = Application::EqualsBtn;
  }

  $rect <360,150,560,190>
  slot onActivateKey
  {
    sender; /* the method is called from the sender object */
    var WidgetSet::PushButton currentSender = (WidgetSet::PushButton )sender;

    if (currentSender != null) 
    {
      keyString = currentSender.Label;
      var char charCode = '\0';
      var Core::KeyCode keyCode = Core::KeyCode.NoKey;

      if (keyString != "") 
      {   
        charCode = keyString[0];
        if (charCode != '\0' && keyCode == Core::KeyCode.NoKey) 
        {
          GetRoot().DriveKeyboardHitting(Core::KeyCode.NoKey, charCode, true);
          GetRoot().DriveKeyboardHitting(Core::KeyCode.NoKey, charCode, false);
        }

        if (keyCode != Core::KeyCode.NoKey) 
        {
          GetRoot().DriveKeyboardHitting(keyCode, '\0', true);
          GetRoot().DriveKeyboardHitting(keyCode, '\0', false);
        }

      } 
      else
        trace "textKeyView is null";
    } 
    else 
        trace "focusedView is null";
  }

  $rect <600,50,800,90>
  property string keyString;

  $rect <600,100,800,140>
  onset keyString
  {
    // The value doesn't change - nothing to do.
    if ( pure keyString == value )
      return;

    // Remember the property's new value.
    pure keyString = value;


  }

  $rect <600,150,800,190>
  onget keyString
  {
    return pure keyString;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Dot
  {
    preset Layout = Core::Layout[AlignToLeft, AlignToTop];
    preset Bounds = <150,360,220,430>;
    preset OnActivate = onActivateKey;
    preset Label = ".";
    preset Appearance = DigitOpConfig;
  }

  $rect <360,280,560,320>
  object Core::Timer FlashKeyTimer
  {
    preset OnTrigger = triggerTimer;
    preset Period = 0;
    preset Begin = 100;
    preset Enabled = false;
  }

  $rect <600,280,800,320>
  slot triggerTimer
  {
    sender; /* the method is called from the sender object */
    InvalidateViewState();
  }

  // Flash effect
  note group Note
  {
    attr Bounds = <340,230,820,350>;
  }

  // Handling pressed key
  note group Note1
  {
    attr Bounds = <340,0,820,210>;
  }

  // Push Button Configurations
  note group Note2
  {
    attr Bounds = <870,10,1170,560>;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton empty00
  {
    preset Bounds = <1205,149,1270,199>;
    preset Label = "Caption";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton One
  {
    preset Bounds = <10,150,80,220>;
    preset OnActivate = onActivateKey;
    preset Label = "1";
    preset Appearance = DigitOpConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Power
  {
    preset Bounds = <80,80,150,150>;
    preset OnActivate = onActivateKey;
    preset IconFrameActive = 1;
    preset IconFrameFocused = 1;
    preset IconFrameDefault = 0;
    preset IconFrame = 0;
    preset Icon = null;
    preset Label = "^";
    preset Appearance = PowConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton Percentage
  {
    preset Bounds = <150,79,220,149>;
    preset OnActivate = onActivateKey;
    preset Label = "%";
    preset Appearance = PercentConfig;
  }

  $rect <900,150,1140,190>
  object WidgetSet::PushButtonConfig PowConfig
  {
    preset IconMarginBottom = 2;
    preset IconMarginTop = 2;
    preset IconMarginRight = 2;
    preset IconMarginLeft = 2;
    preset IconAlignment = Views::ImageAlignment[AlignHorzCenter, AlignVertCenter];
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::PowBtn;
    preset FaceBitmapFocused = Application::PowBtn;
    preset FaceBitmapDisabled = Application::PowBtn;
    preset FaceBitmapDefault = Application::PowBtn;
  }

  $rect <900,200,1140,240>
  object WidgetSet::PushButtonConfig PercentConfig
  {
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::PercentBtn;
    preset FaceBitmapFocused = Application::PercentBtn;
    preset FaceBitmapDisabled = Application::PercentBtn;
    preset FaceBitmapDefault = Application::PercentBtn;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton empty01
  {
    preset Bounds = <1205,9,1270,59>;
    preset Label = "Caption";
    preset Appearance = PowConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton empty02
  {
    preset Bounds = <1205,79,1270,129>;
    preset Label = "Caption";
    preset Appearance = PercentConfig;
  }

  $rect <900,100,1140,140>
  object WidgetSet::PushButtonConfig DigitOpBoldConfig
  {
    preset KeyCode = Core::KeyCode.NoKey;
    preset AccentColorFocused = #03040000;
    preset AccentColorDefault = #00000000;
    preset AccentLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset LabelColorActive = #8E6B74FF;
    preset LabelColorFocused = #8E6B74FF;
    preset LabelColorDisabled = #8E6B74FF;
    preset LabelColorDefault = #000000FF;
    preset LabelFont = Application::NumBoldFont;
    preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::CustomBtn;
    preset FaceBitmapFocused = Application::CustomBtn;
    preset FaceBitmapDisabled = Application::CustomBtn;
    preset FaceBitmapDefault = Application::CustomBtn;
  }

  $rect <900,250,1140,290>
  object WidgetSet::PushButtonConfig DivideConfig
  {
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::DivideBtn;
    preset FaceBitmapFocused = Application::DivideBtn;
    preset FaceBitmapDisabled = Application::DivideBtn;
    preset FaceBitmapDefault = Application::DivideBtn;
  }

  $rect <900,350,1140,390>
  object WidgetSet::PushButtonConfig MultiplyConfig
  {
    preset KeyCode = Core::KeyCode.NoKey;
    preset AccentColorFocused = #03040000;
    preset AccentColorDefault = #00000000;
    preset AccentLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset LabelColorActive = #8E6B74FF;
    preset LabelColorFocused = #8E6B74FF;
    preset LabelColorDisabled = #8E6B74FF;
    preset LabelColorDefault = #000000FF;
    preset LabelFont = Application::MultiplyFont;
    preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::CustomBtn;
    preset FaceBitmapFocused = Application::CustomBtn;
    preset FaceBitmapDisabled = Application::CustomBtn;
    preset FaceBitmapDefault = Application::CustomBtn;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton OpenParanthesis
  {
    preset Bounds = <10,80,45,150>;
    preset OnActivate = onActivateKey;
    preset Label = "(";
    preset Appearance = ParanthesisConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton ClosedParanthesis
  {
    preset Bounds = <45,80,80,150>;
    preset OnActivate = onActivateKey;
    preset Label = ")";
    preset Appearance = ParanthesisConfig;
  }

  $rect <900,400,1140,440>
  object WidgetSet::PushButtonConfig ParanthesisConfig
  {
    preset KeyCode = Core::KeyCode.NoKey;
    preset AccentColorFocused = #03040000;
    preset AccentColorDefault = #00000000;
    preset AccentLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset LabelColorActive = #FFFCFEFF;
    preset LabelColorFocused = #FFFCFEFF;
    preset LabelColorDisabled = #FFFCFEFF;
    preset LabelColorDefault = #000000FF;
    preset LabelFont = Application::NumFont;
    preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::ParenthesisBtn;
    preset FaceBitmapFocused = Application::ParenthesisBtn;
    preset FaceBitmapDisabled = Application::ParenthesisBtn;
    preset FaceBitmapDefault = Application::ParenthesisBtn;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton PlusNeg
  {
    preset Bounds = <10,360,80,430>;
    preset OnActivate = onActivateKey;
    preset Label = "+/-";
    preset Appearance = NegateNumbers;
  }

  $rect <900,450,1140,490>
  object WidgetSet::PushButtonConfig NegateNumbers
  {
    preset KeyCode = Core::KeyCode.NoKey;
    preset AccentColorFocused = #03040000;
    preset AccentColorDefault = #00000000;
    preset AccentLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset LabelColorActive = #8E6B74FF;
    preset LabelColorFocused = #8E6B74FF;
    preset LabelColorDisabled = #8E6B74FF;
    preset LabelColorDefault = #000000FF;
    preset LabelFont = Application::NumFont1;
    preset FaceLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::CustomBtn;
    preset FaceBitmapFocused = Application::CustomBtn;
    preset FaceBitmapDisabled = Application::CustomBtn;
    preset FaceBitmapDefault = Application::CustomBtn;
  }

  $rect <900,500,1140,540>
  object WidgetSet::PushButtonConfig BackConfig
  {
    preset KeyCode = Core::KeyCode.Backspace;
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::BackBtn;
    preset FaceBitmapFocused = Application::BackBtn;
    preset FaceBitmapDisabled = Application::BackBtn;
    preset FaceBitmapDefault = Application::BackBtn;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton BackBtn
  {
    preset Bounds = <222,7,292,77>;
    preset OnActivate = onActivateKey;
    preset Label = "b";
    preset Appearance = BackConfig;
  }

  $rect <590,360,790,400>
  var bool Negate = false;

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Bounds
  $member UpdateLayout
  $member UpdateViewState
  $member Border
  $member DigitOpConfig
  $member EqualsConfig
  $member onActivateKey
  $member keyString
  $member OnSetkeyString
  $member OnGetkeyString
  $member FlashKeyTimer
  $member triggerTimer
  $member Note
  $member Note1
  $member Note2
  $member empty00
  $member empty01
  $member empty02
  $member One
  $member Two
  $member Three
  $member Four
  $member Five
  $member Six
  $member Seven
  $member Eight
  $member Nine
  $member Zero
  $member Clear
  $member Plus
  $member Minus
  $member Multiply
  $member Divide
  $member PlusNeg
  $member Dot
  $member Power
  $member Percentage
  $member OpenParanthesis
  $member ClosedParanthesis
  $member Equals
  $member PowConfig
  $member PercentConfig
  $member DigitOpBoldConfig
  $member DivideConfig
  $member MultiplyConfig
  $member ParanthesisConfig
  $member NegateNumbers
  $member BackConfig
  $member BackBtn
  $member Negate
}

$rect <220,20,420,60>
$output false
resource Resources::Bitmap CustomBtn
{
  attr bitmapfile FileName = .\resources\buttons.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize = <70,70>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// This component implements an editor.
$rect <-50,170,150,210>
$output false
class ResultTxtEd : Templates::TextEditor
{
  $rect <670,620,870,660>
  inherited property Bounds = <0,0,160,120>;

  $rect <680,280,880,320>
  inherited method UpdateViewState()
  {
    // Always invoke the inherited version of the method
    super( aState );

    // Activate the caret blinking if the editor component has the input focus
    if ( aState.contains( Core::ViewState[ Focused ]))
      blinkEffect.Enabled = true;

    // ... otherwise hide the caret
    else
    {
      blinkEffect.Enabled = false;
      Caret.Visible       = false;
    }
  }

  // To do:
  // 
  // - Adjust the visible size of the text editor (the thick blue border). This will \
  // be the editor's default size.
  // - Resize and arrange the member 'Text' so it covers the area where you intend \
  // to display the text. This is usually the entire area.
  // - Adjust the position and the size of the 'SimpleTouchHandler' and 'SlideTouchHandler', \
  // so they cover the 'Text' view.
  // - If your design it expects, add and configure more views in the component, \
  // e.g. views to display background, borders, etc.
  // - The editor implements several handler to process keyboard inputs. See the \
  // annotation 'Keyboard events'. Feel free to add more handler for other key events \
  // or remove the handler you don't need in your version.
  // - The editor displays a magnifying glass when the user touches and holds the \
  // finger for a while (see the method 'onHoldTouch'). If you don't want it, remove \
  // the contents within the annotation 'Magnifying glass' and the slot method 'onHoldTouch'.
  // - The editor reacts to touch interactions. See the annotation 'Touch screen \
  // events'. If your device is not touch driven, you can remove the both handlers \
  // 'SimpleTouchHandler', 'SlideTouchHandler' and the methods from the annotation \
  // 'Touch screen events'.
  // - Adapt the implementation of the 'UpdateViewState()' method. This method should \
  // update your views so they reflect the editor's current state (e.g. focused editor \
  // may appear with other colors, etc.)
  // - The editor is implemented with various properties allowing the configuration \
  // of the text (e.g. 'Font', 'Color', ...). If your version of the editor doesn't \
  // need such configuration, remove the properties and the associated OnSet methods.
  // - If you need other properties to configure the editor, add from the Gallery \
  // folder 'Chora' new properties. One property for every new setting (e.g. 'BorderWidth', \
  // etc.)
  // - Rename the properties accordingly their usage and remove their 'OnGet...' \
  // methods.
  // - For every newly added property adapt their 'OnSet...' method implementation. \
  // Ensure in the method that the assigned value is correctly passed to the corresponding \
  // view (e.g. a property 'BorderWidth' should update the eventually used 'Border' \
  // view, etc.).
  // - Feel free to modify any other member in this component accordingly your needs. \
  // Please note the member description and inline comments within methods.
  note legend Note6
  {
    attr Bounds = <10,690,990,1150>;
  }

  // Magnifying glass
  note group Note5
  {
    attr Bounds = <440,500,660,670>;
  }

  // Caret
  note group Note4
  {
    attr Bounds = <10,500,430,670>;
  }

  // State management
  note group Note3
  {
    attr Bounds = <670,240,890,330>;
  }

  // Touch screen events
  note group Note2
  {
    attr Bounds = <440,240,660,450>;
  }

  // Keyboard events
  note group Note1
  {
    attr Bounds = <10,240,430,490>;
  }

  // This internal variable refers to a temporary Views::Image object used to show \
  // the background for the augmented text content around the caret. This view appears \
  // during the user is moving this caret by touching the caret with the finger.
  $rect <450,620,650,660>
  var Views::Rectangle magnifyingBack = null;

  // This internal variable refers to a temporary Views::WarpGroup object used to \
  // show the augmented text content around the caret. This view appears during the \
  // user is moving this caret by touching the caret with the finger.
  $rect <450,580,650,620>
  var Views::WarpGroup magnifyingView = null;

  // This flag is set if it is evtl. necessary to scroll the editor content in order \
  // to ensure that the caret is still visible.
  $rect <220,620,420,660>
  var bool autoScroll;

  // This internal variable stores the current caret index. This is the position \
  // within Text.String property where the user can input text or delete signs.
  $rect <20,620,220,660>
  var int32 caretIndex = 0;

  // This slot method is called after the caret has been adjusted. Its job is to \
  // adjust too the position of the magnifying glass view where the augmented text \
  // content around the caret is shown.
  $rect <450,540,650,580>
  slot updateMagnifyingView
  {
    // There is actually no magnifying glass displayed. Nothing to do.
    if ( magnifyingView == null )
      return;

    var rect  srcArea = magnifyingView.SourceArea;
    var rect  extent  = magnifyingView.GetExtent();
    var rect  bounds  = Bounds;
    var point caret   = Caret.Point1;

    // Calculate the start position of the area to show in the magnifying
    // view. Preferably the caret should appear in the center of this area.
    var int32 srcX = caret.x - ( srcArea.w / 2 );

    // However, the part of magnifying glass displaying the caret should 
    // remain arranged horizontally within the editor area.
    if ( srcX < 0 )
      srcX = 0;

    if (( srcX + srcArea.w ) > bounds.w )
      srcX = bounds.w - srcArea.w;

    // The resulting start position of the area to augment
    magnifyingView.SourceArea.origin = point( srcX, caret.y );

    // Now calculate the position for the magnifyingView. Preferably the
    // the view should be arranged so it shows the augmented caret 
    // exactly above the origin caret
    var int32 dstX = ( bounds.x1 + caret.x ) - ( caret.x - srcX ) * 2;

    // From the new magnifyingView position and its current position calculate
    // an offset.
    var point ofs = point( dstX - extent.x1, bounds.y1 + caret.y - extent.y2 );

    // Move the magnifyingView and its background by the just calculated offset
    magnifyingView.MoveView( ofs, false );
    magnifyingBack.MoveView( ofs, false );
  }

  // This slot method is called after a short delay when the user has moved the caret \
  // or modified the text. Its job is to ensure that the caret is still visible. \
  // If necessary, the editor content is scrolled.
  $rect <220,540,420,580>
  slot updateScrollOffset
  {
    // Get the visible area of the text view
    var rect  bounds = Text.Bounds;
    var int32 ofsX   = 0;
    var int32 ofsY   = 0;

    // Calculate an offset to scroll the text content if the caret lies
    // outside the visible area
    if ( Caret.Point1.x < bounds.x1 ) ofsX = bounds.x1 - Caret.Point1.x;
    if ( Caret.Point1.x > bounds.x2 ) ofsX = bounds.x2 - Caret.Point1.x;
    if ( Caret.Point1.y < bounds.y1 ) ofsY = bounds.y1 - Caret.Point1.y;
    if ( Caret.Point2.y > bounds.y2 ) ofsY = bounds.y2 - Caret.Point2.y;

    // Should the cont be scrolled?
    if (( ofsX != 0 ) || ( ofsY != 0 ))
      Text.ScrollOffset = Text.ScrollOffset + point( ofsX, ofsY );

    // The following code takes care of the automatic adjustment of the
    // text scroll position if after modifying the text, its area is small
    // enough to be completely visible.
    ofsX = Text.ScrollOffset.x;
    ofsY = Text.ScrollOffset.y;

    // Get the current text area of the 
    var point size = Text.GetContentArea().size;

    // Does the area fit completely within the text editor?
    if ( size.x <= Text.Bounds.w ) ofsX = 0;
    if ( size.y <= Text.Bounds.h ) ofsY = 0;

    // If possible arrange the text so it fits within the text editor.
    Text.ScrollOffset = point( ofsX, ofsY );
  }

  // This slot method is attached to the Text view. Each time the Text view has rearranged \
  // the text, this method is called. Its job is to adjust the caret to the evtl. \
  // new position.
  $rect <20,540,220,580>
  slot updateCaret
  {
    // Without the font we don't know the height of the caret
    if ( Font == null )
      return;

    // Get the pixel position of the sign right to the caret
    var point rowCol = Text.StringIndex2RowCol( caretIndex );
    var point pos    = Text.RowCol2Position( rowCol );

    // Arrange the caret at the just determined position. The height of 
    // the caret corresponds to the height of a text row drawn with the
    // font
    Caret.Point1 = pos - point( 0, Font.Ascent  );
    Caret.Point2 = pos + point( 0, Font.Descent );

    // Restart the blink effect -> this ensures that the user can see the
    // caret while it is moved or the text is modified
    if ( blinkEffect.Enabled )
    {
      blinkEffect.Enabled = false;
      blinkEffect.Enabled = true;
    }

    // Should adjust the scroll position so that the caret remains in the visible
    // area? Finally clear the 'autoScroll' flag again.
    if ( autoScroll )
    {
      postsignal updateScrollOffset;
      autoScroll = false;
    }

    // If there is a magnifying glass view visible -> arrange it also to the
    // current caret position.
    if ( magnifyingView != null )
      postsignal updateMagnifyingView;
  }

  // This method is called from the corresponding SimpleTouchHandler. Its job is \
  // to hide the magnifying glass view again.
  $rect <450,400,650,440>
  slot onReleaseTouch
  {
    // Hide the views used temporarily to show the augmented editor content
    if ( magnifyingView != null )
    {
      Owner.Remove( magnifyingView );
      Owner.Remove( magnifyingBack );
      magnifyingView = null;
      magnifyingBack = null;

      // Free the temporary used off-screen memory
      Buffered = false;
    }
  }

  // This method is called from the corresponding SimpleTouchHandler. Its job is \
  // to move the caret accordingly to the user's finger movement.
  $rect <450,360,650,400>
  slot onDragTouch
  {
    // Does the user currently drag the caret?
    if ( magnifyingView != null )
    {
      // From the touched screen position estimate the corresponding position
      // within the text string.
      var point  rc            = Text.Position2RowCol( SimpleTouchHandler.CurrentPos );
      var int32  newCaretIndex = Text.RowCol2StringIndex( rc );
      var char   ch            = Text.String[ newCaretIndex ];

      // The caret points to a special control sign? In this case the sign comes
      // together with the preceding '%' escape sign - otherwise the user couldn't
      // see the sign. Adjust the caret position to refer the escape sign.
      if (( ch == '^' ) || ( ch == '~' ) || ( ch == '%' ))
        newCaretIndex = newCaretIndex - 1;

      // Does the caret position change? Force the editor to update the
      // position of the blinking caret
      if ( newCaretIndex != caretIndex )
      {
        caretIndex = newCaretIndex;
        postsignal updateCaret;

        // Ensure the caret is still visible later in the updateText slot method
        autoScroll = true;
      }
    }

    // No, then redirect the touch interaction to the slide touch handler when the
    // user moved the finger a little bit. In this manner the user can scroll the text.
    else
    {
      var point ofs   = SimpleTouchHandler.CurrentPos - SimpleTouchHandler.HittingPos;
      var int32 limit = GetRoot().CursorDragLimit;

      // Start the slide mode if the user has dragged the finger a little bit
      if (( ofs.x < -limit ) || ( ofs.x > limit ) ||
          ( ofs.y < -limit ) || ( ofs.y > limit ))
        GetRoot().DeflectCursor( SlideTouchHandler, <0,0>);
    }
  }

  // This method is called from the corresponding SimpleTouchHandler. Its job is \
  // to activate the caret movement mode if the user has pressed the finger on the \
  // screen for a while. The method also shows a small magnifying glass where the \
  // text around the caret is shown. This should help the user to navigate the caret \
  // with the finger.
  $rect <450,320,650,360>
  slot onHoldTouch
  {
    // When the user presses the finger within the text editor area,
    // the editor enters the caret dragging mode. In this mode the
    // user can move the caret with the finger. For convenience the
    // area below the finger is displayed in a kind of magnifying glass.
    // Does enter the mode?
    if (( SimpleTouchHandler.HoldPeriod >= 300 ) && ( magnifyingView == null ))
    {
      // Calculate the size of the area to augment
      var int32 height = Caret.Point2.y - Caret.Point1.y;
      var int32 width  = height * 3;

      // Limit to the available size of the editor component
      if ( height > Bounds.h ) height = Bounds.h;
      if ( width  > Bounds.w ) width  = Bounds.w;

      // The editor component should store its content in an off-screen bitmap
      // in order to be able to to show it augmented in an overlay 'magnifyingView'
      Buffered = true;

      // Create a temporary view to show the augmented content and to show the
      // 'magnifying glass' background
      magnifyingView = new Views::WarpGroup;
      magnifyingBack = new Views::Rectangle;

      // Prepare a magnifyingView to show an augmented content of the edited text
      // row. The content is augmented by the factor x 2
      magnifyingView.Group       = this;
      magnifyingView.Quality     = true;
      magnifyingView.Opacity     = 200;
      magnifyingView.SourceArea  = rect( 0, 0, width, height );
      magnifyingView.Point2.x    = width  * 2;
      magnifyingView.Point3.x    = width  * 2;
      magnifyingView.Point3.y    = height * 2;
      magnifyingView.Point4.y    = height * 2;

      // Also prepare the magnifying glass background view. It is a semitransparent
      // rectangle.
      magnifyingBack.Bounds.size   = point( width * 2, height * 2 ) + <20,20>;
      magnifyingBack.Bounds.origin = <-10,-10>;
      magnifyingBack.Color         = #EEEEEECC;

      // Make the just created views visible on the screen
      Owner.Add( magnifyingBack, 0 );
      Owner.Add( magnifyingView, 0 );

      // Arrange the 'magnifying glass' views at the correct position
      postsignal updateMagnifyingView;
    }

    // Even if the user is not moving the cursor (finger) continue the scrolling when
    // the user holds the finger near an edge of the text editor.
    if ( magnifyingView != null )
      signal onDragTouch;
  }

  // This method is called from the corresponding SimpleTouchHandler. Its job is \
  // to obtain the focused state for the editor so the user can interact with the \
  // editor content and to place the caret at the touched position.
  $rect <450,280,650,320>
  slot onPressTouch
  {
    // With the first touch focus the text editor
    if ( !HasViewState( Core::ViewState[ Focused ]))
      ObtainFocus();

    // Estimate the position within the text string corresponding to the
    // position touched on the screen.
    var point rc            = Text.Position2RowCol( SimpleTouchHandler.CurrentPos );
    var int32 newCaretIndex = Text.RowCol2StringIndex( rc );
    var char  ch            = Text.String[ newCaretIndex ];

    // The caret points to a special control sign? In this case the sign comes
    // together with the preceding '%' escape sign - otherwise the user couldn't
    // see the sign. Adjust the caret position to refer the escape sign.
    if (( ch == '^' ) || ( ch == '~' ) || ( ch == '%' ))
      newCaretIndex = newCaretIndex - 1;

    // Does the caret position change? Force the text editor to update the
    // position of the blinking caret
    if ( newCaretIndex != caretIndex )
    {
      caretIndex = newCaretIndex;
      postsignal updateCaret;

      // Ensure the caret is still visible later in the updateText slot method
      autoScroll = true;
    }
  }

  // This method is called from the corresponding keyboard handler. Its job is to \
  // move the caret up/down/left or right in the editor text.
  $rect <220,440,420,480>
  slot onCursorKey
  {
    // No font specified to show the text -> no navigation
    // possible
    if ( Font == null )
      return;

    // Knowing the position of the caret within the string, get the
    // corresponding row/column position in the displayed text.
    var point rc = Text.StringIndex2RowCol( caretIndex );

    // Has the user moved the caret to the left? Get the new resulting
    // row/column number
    if ( CursorKeyHandler.Code == Core::KeyCode.Left )
    {
      // Navigate to the previous column
      rc.x = rc.x - 1;

      // The begin of the row reached? Skip to the end of the preceding row.
      if ( Text.RowCol2StringIndex( rc ) == caretIndex )
      {
        rc.y = rc.y - 1;
        rc.x = Text.GetRowString( rc.y ).length;
      }
    }

    // Has the user moved the caret to the right? Get the resulting
    // row/column number
    if ( CursorKeyHandler.Code == Core::KeyCode.Right )
    {
      // Navigate to the next column
      rc.x = rc.x + 1;

      // The end of the current row reached? Skip to the begin of the next
      // following row.
      if ( Text.RowCol2StringIndex( rc ) == caretIndex )
      {
        rc.y = rc.y + 1;
        rc.x = 0;
      }
    }

    // Has the user moved the caret one row up? Get the resulting
    // row/column number
    if ( CursorKeyHandler.Code == Core::KeyCode.Up )
    {
      // Get the pixel position where the sign at actual caret position
      // is displayed
      var point pos       = Text.RowCol2Position( rc );
      var int32 rowHeight = Font.Ascent + Font.Descent + Font.Leading;

      // Get the row/column corresponding to the sign in the row just above
      rc = Text.Position2RowCol( pos - point( 0, rowHeight ));
    }

    // Has the user moved the caret one row down? Get the resulting
    // row/column number
    if ( CursorKeyHandler.Code == Core::KeyCode.Down )
    {
      // Get the pixel position where the sign at actual caret position
      // is displayed
      var point pos       = Text.RowCol2Position( rc );
      var int32 rowHeight = Font.Ascent + Font.Descent + Font.Leading;

      // Get the row/column corresponding to the sign in the row just below
      rc = Text.Position2RowCol( pos + point( 0, rowHeight ));
    }

    // From the just determined new row/column position get the corresponding
    // position within the text string
    var int32 newCaretIndex = Text.RowCol2StringIndex( rc );
    var char  ch            = Text.String[ newCaretIndex ];

    // The caret points to a special control sign? In this case the sign comes
    // together with the preceding '%' escape sign - otherwise the user couldn't
    // see the sign. Adjust the caret position to refer the escape sign.
    if (( ch == '^' ) || ( ch == '~' ) || ( ch == '%' ))
      newCaretIndex = newCaretIndex - 1;

    // Does the caret position change? Force the editor to update the
    // position of the blinking caret
    if ( newCaretIndex != caretIndex )
    {
      caretIndex = newCaretIndex;
      postsignal updateCaret;

      // Ensure the caret is still visible later in the updateText slot method
      autoScroll = true;
    }
  }

  // This method is called from the corresponding keyboard handler. Its job is to \
  // delete the sign preceding the current caret position and to move the caret accordingly.
  $rect <220,400,420,440>
  slot onBackspaceKey
  {
    // No signs preceding the caret -> Nothing to delete
    if ( caretIndex == 0 )
      return;

    // Get the sign which should be deleted from the text.
    var char  ch    = Text.String[ caretIndex - 1 ];
    var int32 count = 1;

    // The sign was a special control sign? In this case the sign comes
    // together with the preceding '%' escape sign - otherwise the user
    // couldn't see the sign
    if (( ch == '^' ) || ( ch == '~' ) || ( ch == '%' ))
      count = 2;

    // Remove the affected text portion and adjust the caret position
    Text.String = Text.String.remove( caretIndex - count, count );
    caretIndex  = caretIndex - count;

    // Ensure the caret is still visible later in the updateText slot method
    autoScroll = true;

    // Inform the owner of this text editor component, that the text has been
    // modified by the user
    postsignal OnChange;
  }

  // This method is called from the corresponding keyboard handler. Its job is to \
  // delete the sign at the current caret position.
  $rect <220,360,420,400>
  slot onDeleteKey
  {
    // No signs following the caret -> Nothing to delete
    if ( caretIndex >= ( Text.String.length - 1 ))
      return;

    // Get the sign which should be deleted from the text.
    var char  ch    = Text.String[ caretIndex ];
    var int32 count = 1;

    // The sign was a special control sign? In this case the sign comes
    // together with the preceding '%' escape sign - otherwise the user
    // couldn't see the sign
    if ( ch == '%' )
      count = 2;

    // Remove the affected text fragment
    Text.String = Text.String.remove( caretIndex, count );

    // Ensure the caret is still visible later in the updateText slot method
    autoScroll = true;

    // Inform the owner of this text editor component, that the text has been
    // modified by the user
    postsignal OnChange;
  }

  // This method is called from the corresponding keyboard handler. Its job is to \
  // insert at the current caret position the <new line> sign and to move the caret \
  // to the next row.
  $rect <220,320,420,360>
  slot onNewlineKey
  {
    // Take over the just input sign and adjust the caret position
    Text.String = Text.String.insert( '\n', caretIndex );
    caretIndex  = caretIndex + 1;

    // Ensure the caret is still visible later in the updateText slot method
    autoScroll = true;

    // Inform the owner of this text editor component, that the text has been
    // modified by the user
    postsignal OnChange;
  }

  // This method is called from the corresponding keyboard handler. Its job is to \
  // insert at the current caret position the sign which has been input by the user \
  // and to move the caret to the next column.
  $rect <220,280,420,320>
  slot onCharacterKey
  {
    var char   ch  = CharacterKeyHandler.CharCode;
    var string str = ch;

    // Precede all special control signs with the '%' escape sign. Otherwise
    // the user can't input nor see them
    if (( ch == '^' ) || ( ch == '~' ) || ( ch == '\xAD' ) || ( ch == '%' ))
      str = "%" + ch;

    // Take over the just input sign and adjust the caret position
    Text.String = Text.String.insert( str, caretIndex );
    caretIndex  = caretIndex + str.length;

    // Ensure the caret is still visible later in the updateText slot method
    autoScroll = true;

    // Inform the owner of this text editor component, that the text has been
    // modified by the user
    postsignal OnChange;
  }

  $rect <390,180,590,220>
  onset WrapText
  {
    // The value doesn't change - nothing to do.
    if ( pure WrapText == value )
      return;

    // Remember the new value ...
    pure WrapText = value;
    Text.WrapText = value;

    // If the text is warp automatically in rows, there is no need to
    // scroll the text horizontally.
    SlideTouchHandler.SlideHorz = !value;

    // Ensure the caret is still visible later in the updateText slot method
    autoScroll        = true;
    Text.ScrollOffset = <0,0>;
  }

  $rect <190,180,390,220>
  onset Alignment
  {
    // The value doesn't change - nothing to do.
    if ( pure Alignment == value )
      return;

    // Remember the new value ...
    pure Alignment = value;
    Text.Alignment = value;

    // Ensure the caret is still visible later in the updateText slot method
    autoScroll        = true;
    Text.ScrollOffset = <0,0>;
  }

  $rect <590,90,790,130>
  onget String
  {
    // Get the current text view content
    var string str = Text.String;

    // In the following steps remove any special text view control signs
    // which are usually used to control the text flow. The resulting string
    // should contain the 'pure' text only.
    var int32 inx = str.find( '%', 0 );

    // The special control/escape signs are not visible until there is a
    // '%' sign in front of them. Remove all superfluous '%' signs
    while ( inx >= 0 )
    {
      str = str.remove( inx, 1 );
      inx = str.find( '%', inx + 1 );
    }

    // Finally remove the <new line> sign at the end of text which was used
    // as workaround for a text flow parser issue
    return str.left( str.length - 1 );
  }

  $rect <590,50,790,90>
  onset String
  {
    // In the following steps disarm in the assigned Unicode string the special
    // control and escape signs, which usually control the text flow in a  text
    // view. Without this conversion step, signs like '%' couldn't be seen in
    // the editor.
    var string str = value;
    var int32  inx = str.find( '%', 0 );

    // The special '%' escape sign is not visible until there is other
    // '%' sign in front of it. Convert all '%' signs into '%%' sequences
    while ( inx >= 0 )
    {
      str = str.insert( "%", inx );
      inx = str.find( '%', inx + 2 );
    }

    inx = str.find( '^', 0 );

    // The special '^' control sign is not visible until there is a '%'
    // sign in front of it. Convert all '^' signs into '%^' sequences
    while ( inx >= 0 )
    {
      str = str.insert( "%", inx );
      inx = str.find( '^', inx + 2 );
    }

    inx = str.find( '~', 0 );

    // The special '~' control sign is not visible until there is a '%'
    // sign in front of it. Convert all '~' signs into '%~' sequences
    while ( inx >= 0 )
    {
      str = str.insert( "%", inx );
      inx = str.find( '~', inx + 2 );
    }

    inx = str.find( '\xAD', 0 );

    // The special '\xAD' hyphen sign is not visible until there is a '%'
    // sign in front of it. Convert all '\xAD' hyphen signs into '%\xAD'
    // sequences
    while ( inx >= 0 )
    {
      str = str.insert( "%", inx );
      inx = str.find( '\xAD', inx + 2 );
    }

    // Ensure that the caret still refers to a sign within the string
    if ( caretIndex > str.length )
      caretIndex = str.length;

    // Now show the new string in the editor's text view. The additional
    // <new line> is a workaround for a flow text parser issue
    Text.String = str + "\n";

    // Ensure the caret is still visible later in the updateText slot method
    autoScroll        = true;
    Text.ScrollOffset = <0,0>;
  }

  $rect <390,50,590,90>
  onset Color
  {
    // The value doesn't change - nothing to do.
    if ( pure Color == value )
      return;

    // Store the new Color
    pure Color  = value;
    Text.Color  = value;
    Caret.Color = value;
  }

  $rect <190,50,390,90>
  onset Font
  {
    // The value doesn't change - nothing to do.
    if ( pure Font == value )
      return;

    // Store the new font...
    pure Font = value;
    Text.Font = value;

    // Ensure the caret is still visible later in the updateText slot method
    autoScroll        = true;
    Text.ScrollOffset = <0,0>;
  }

  // This bool change effect is used to blink the caret.
  $rect <20,580,220,620>
  object Effects::BoolEffect blinkEffect
  {
    preset Value2 = false;
    preset Value1 = true;
    preset Outlet = ^Caret.Visible;
    preset CycleDuration = 500;
    preset InterCycleDelay = 500;
  }

  // This key handler reacts to user inputs if the user has pressed the 'up', 'down', \
  // 'left' or 'right' key. In this case the associated onCursorKey method is called.
  $rect <20,440,220,480>
  object Core::KeyPressHandler CursorKeyHandler
  {
    preset OnPress = onCursorKey;
    preset Filter = Core::KeyCode.CursorKeys;
    preset OnHold = onCursorKey;
  }

  // This key handler reacts to user inputs if the user has pressed the 'backspace' \
  // key. In this case the associated onBackspaceKey method is called.
  $rect <20,400,220,440>
  object Core::KeyPressHandler BackspaceKeyHandler
  {
    preset OnPress = onBackspaceKey;
    preset Filter = Core::KeyCode.Backspace;
    preset OnHold = onBackspaceKey;
  }

  // This key handler reacts to user inputs if the user has pressed the 'delete' \
  // key. In this case the associated onDeleteKey method is called.
  $rect <20,360,220,400>
  object Core::KeyPressHandler DeleteKeyHandler
  {
    preset OnPress = onDeleteKey;
    preset Filter = Core::KeyCode.Delete;
    preset OnHold = onDeleteKey;
  }

  // This key handler reacts to user inputs if the user has pressed the 'enter' key. \
  // In this case the associated onNewlineKey method is called.
  $rect <20,320,220,360>
  object Core::KeyPressHandler NewlineKeyHandler
  {
    preset OnPress = onNewlineKey;
    preset Filter = Core::KeyCode.Enter;
    preset OnHold = onNewlineKey;
  }

  // This key handler reacts to user inputs if the user has pressed a key corresponding \
  // to character/digit. In this case the associated onCharacterKey method is called.
  $rect <20,280,220,320>
  object Core::KeyPressHandler CharacterKeyHandler
  {
    preset OnPress = onCharacterKey;
    preset Filter = Core::KeyCode.CharacterKeys;
    preset OnHold = onCharacterKey;
  }

  // This slide gesture handler is used to scroll the text content.
  $rect <20,20,160,60>
  object Core::SlideTouchHandler SlideTouchHandler
  {
    preset Layout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset Bounds = <0,0,160,120>;
    preset SlideHorz = false;
    preset Friction = 0.05;
  }

  // This generic touch handler is used to move the caret.
  $rect <20,20,160,60>
  object Core::SimpleTouchHandler SimpleTouchHandler
  {
    preset Layout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset Point4 = <0,120>;
    preset Point3 = <160,120>;
    preset Point2 = <160,0>;
    preset Point1 = <0,0>;
    preset OnDrag = onDragTouch;
    preset OnHold = onHoldTouch;
    preset OnRelease = onReleaseTouch;
    preset OnPress = onPressTouch;
    preset MaxStrikeCount = 3;
  }

  $rect <20,20,160,60>
  object Views::Text Text
  {
    preset Layout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset Bounds = <2,2,157,117>;
    preset OnUpdate = updateCaret;
    preset SlideHandler = SlideTouchHandler;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];
    preset String = "Text\n";
    preset Font = Resources::FontMedium;
    preset Color = #000000FF;
  }

  $rect <20,20,160,60>
  object Views::Line Caret
  {
    preset Point2 = <50,70>;
    preset Point1 = <50,50>;
    preset Width2 = 2;
    preset Width1 = 2;
    preset Color = #000000FF;
    preset Visible = false;
  }

  // The property 'OnChange' can refer to a slot method, which should be invoked \
  // by the text editor when the user modifies the text.
  $rect <590,140,790,180>
  property slot OnChange = null;

  // The property 'WrapText' determines whether long text rows should be wrapped \
  // automatically.
  $rect <390,140,590,180>
  property bool WrapText = true;

  // The property 'Alignment' determines how the editor should display the text rows \
  // if their size differs from the size of the editor. 
  // In this manner the rows can be aligned horizontally. The entire text block can \
  // be aligned vertically.
  $rect <190,140,390,180>
  property Views::TextAlignment Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter];

  // The property 'String' stores the text of the editor.
  $rect <590,10,790,50>
  property string String = "Text";

  // The property 'Color' controls the color of the text.
  $rect <390,10,590,50>
  property color Color = #000000FF;

  // The property 'Font' refers to the font object used to display the text. The \
  // text is determined by the property @String.
  $rect <190,10,390,50>
  property Resources::Font Font = Resources::FontMedium;
}

$rect <220,70,420,110>
$output false
resource Resources::Bitmap EqualsBtn
{
  attr bitmapfile FileName = .\resources\equals.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize = <140,70>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <480,170,680,210>
$output false
resource Resources::Font EqFont
{
  attr fontname FontName = Book Antiqua;
  attr fontheight Height = 90;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <220,120,420,160>
$output false
resource Resources::Bitmap PercentBtn
{
  attr bitmapfile FileName = .\resources\percent.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize = <70,70>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <220,170,420,210>
$output false
resource Resources::Bitmap PowBtn
{
  attr bitmapfile FileName = .\resources\pow.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize = <70,70>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

// Components
note group Note
{
  attr Bounds = <-80,80,170,330>;
}

// Bitmaps
note group Note1
{
  attr Bounds = <200,-20,440,420>;
}

// Fonts
note group Note2
{
  attr Bounds = <460,-20,700,420>;
}

// Application
note group Note3
{
  attr Bounds = <-80,-20,170,70>;
}

$rect <480,70,680,110>
$output false
resource Resources::Font NumBoldFont
{
  attr fontname FontName = Book Antiqua;
  attr fontheight Height = 50;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = true;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <217,219,417,259>
$output false
resource Resources::Bitmap DivideBtn
{
  attr bitmapfile FileName = .\resources\divide.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize = <70,70>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <480,220,680,260>
$output false
resource Resources::Font MultiplyFont
{
  attr fontname FontName = Consolas;
  attr fontheight Height = 50;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <-50,270,150,310>
$output false
class Pair
{
  $rect <239,-10,439,30>
  property float IdentifiedNumber;

  $rect <239,30,439,70>
  onset IdentifiedNumber
  {
    // The value doesn't change - nothing to do.
    if ( pure IdentifiedNumber == value )
      return;

    // Remember the property's new value.
    pure IdentifiedNumber = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <239,70,439,110>
  onget IdentifiedNumber
  {
    return pure IdentifiedNumber;
  }

  $rect <240,120,440,160>
  property int32 EndPosition = -1;

  $rect <240,160,440,200>
  onset EndPosition
  {
    // The value doesn't change - nothing to do.
    if ( pure EndPosition == value )
      return;

    // Remember the property's new value.
    pure EndPosition = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <240,200,440,240>
  onget EndPosition
  {
    return pure EndPosition;
  }

  $rect <480,-10,680,30>
  property string Subexpression = "none";

  $rect <480,30,680,70>
  onset Subexpression
  {
    // The value doesn't change - nothing to do.
    if ( pure Subexpression == value )
      return;

    // Remember the property's new value.
    pure Subexpression = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <480,70,680,110>
  onget Subexpression
  {
    return pure Subexpression;
  }

  $rect <10,10,160,50>
  inherited method Init()
  {
    aArg;
    IdentifiedNumber = float_infp();
    EndPosition = -1;
    Subexpression = "none";
  }

  // Directives to adapt the order of the above members according to how these members 
  // where arranged when the project content was stored. In this manner the storage 
  // and the expected order of the members don't depend. Merging of changes in the 
  // project files is simplified.
  $member Init
  $member IdentifiedNumber
  $member OnSetIdentifiedNumber
  $member OnGetIdentifiedNumber
  $member EndPosition
  $member OnSetEndPosition
  $member OnGetEndPosition
  $member Subexpression
  $member OnSetSubexpression
  $member OnGetSubexpression
}

$rect <-50,390,150,430>
$output false
const int32 MAX_SIZE = 1000;

$rect <-50,220,150,260>
$output false
class ErrorDialog : Core::Group
{
  $rect <20,130,220,170>
  inherited property Bounds = <0,0,250,100>;

  $rect <20,20,160,60>
  object Views::Rectangle Bgk
  {
    preset Bounds = <0,0,250,100>;
    preset Radius = 3;
    preset Color = #E2E6E9FF;
  }

  $rect <20,20,160,60>
  object Views::Border BgkBorder
  {
    preset Bounds = <0,-1,250,100>;
    preset Radius = 3;
    preset Width = 2;
    preset Color = #470400FF;
  }

  $rect <20,20,160,60>
  object Views::Rectangle TopBar
  {
    preset Bounds = <0,0,250,30>;
    preset RadiusTR = 3;
    preset RadiusTL = 3;
    preset Radius = 3;
    preset Color = #990002FF;
  }

  $rect <20,20,160,60>
  object Views::Border TopBarBgk
  {
    preset Bounds = <0,0,250,30>;
    preset Width = 2;
    preset Color = #460400FF;
  }

  $rect <630,60,870,100>
  object WidgetSet::PushButtonConfig ExitBtnConfig
  {
    preset KeyCode = Core::KeyCode.Enter;
    preset LabelColorActive = #FFFFFFFF;
    preset LabelColorDisabled = #FFFFFFFF;
    preset LabelColorDefault = #000000FF;
    preset LabelMarginBottom = 3;
    preset LabelAlignment = Views::TextAlignment[AlignHorzCenter, AlignVertCenter];
    preset LabelFont = Application::BtnFont;
  }

  $rect <20,20,160,60>
  object Views::Text ErrorText
  {
    preset Bounds = <5,38,235,78>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertTop];
    preset String = "no errors";
    preset Font = Application::ErrorFont;
    preset Color = #2D0200FF;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton PushButton
  {
    preset Bounds = <213,3,243,28>;
    preset OnActivate = onClose;
    preset Label = "X";
    preset Appearance = ExitBtnConfig;
  }

  $rect <20,20,160,60>
  object WidgetSet::PushButton PushButton1
  {
    preset Layout = Core::Layout[AlignToRight, AlignToTop];
    preset Bounds = <159,61,243,91>;
    preset OnActivate = onClose;
    preset Label = "OK";
    preset Appearance = OkBtnConfig;
  }

  $rect <630,110,870,150>
  object WidgetSet::PushButtonConfig OkBtnConfig
  {
    preset KeyCode = Core::KeyCode.Enter;
    preset ThumbBorderColorActive = #20943100;
    preset ThumbBorderColorDefault = #3A842A00;
    preset ThumbBorderWidthActive = 0;
    preset ThumbBorderWidthDefault = 0;
    preset ThumbColorActive = #CC7E5100;
    preset ThumbColorDefault = #B7321F00;
    preset ThumbLayout = Core::Layout[AlignToBottom, AlignToLeft, AlignToRight, AlignToTop, ResizeHorz, ResizeVert];
    preset LabelColorActive = #FFFFFFFF;
    preset LabelColorDisabled = #FFFFFFFF;
    preset LabelColorDefault = #000000FF;
    preset LabelMarginBottom = 3;
    preset LabelAlignment = Views::TextAlignment[AlignHorzAuto, AlignHorzCenter, AlignVertCenter];
    preset LabelFont = Application::BtnFont;
    preset FaceFrameActive = 1;
    preset FaceFrameFocused = 1;
    preset FaceFrameDisabled = 0;
    preset FaceFrameDefault = 0;
    preset FaceBitmapActive = Application::OKBtn;
    preset FaceBitmapFocused = Application::OKBtn;
    preset FaceBitmapDisabled = Application::OKBtn;
    preset FaceBitmapDefault = Application::OKBtn;
  }

  $rect <330,110,530,150>
  slot onClose
  {
    idlesignal OnCloseDialog;
  }

  $rect <330,60,530,100>
  property slot OnCloseDialog = null;

  $rect <20,20,160,60>
  object Views::Text Title
  {
    preset Bounds = <5,0,145,30>;
    preset WrapText = true;
    preset Alignment = Views::TextAlignment[AlignHorzLeft, AlignVertCenter, AlignVertTop];
    preset String = "CALCULATOR ERROR";
    preset Font = Application::ErrorFont;
    preset Color = #F2E6DDFF;
  }

  // Button Configs
  note group Note
  {
    attr Bounds = <600,0,900,170>;
  }

  // Close Dialog
  note group Note1
  {
    attr Bounds = <280,0,580,170>;
  }
}

$rect <480,270,680,310>
$output false
resource Resources::Font ErrorFont
{
  attr fontname FontName = Asap Condensed Medium;
  attr fontheight Height = 15;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <480,320,680,360>
$output false
resource Resources::Font BtnFont
{
  attr fontname FontName = Microsoft Yi Baiti;
  attr fontheight Height = 27;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = true;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <220,320,420,360>
$output false
resource Resources::Bitmap OKBtn
{
  attr bitmapfile FileName = .\resources\ok.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize = <70,30>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <220,270,420,310>
$output false
resource Resources::Bitmap ParenthesisBtn
{
  attr bitmapfile FileName = .\resources\paranthesis.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize = <35,70>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <480,370,680,410>
$output false
resource Resources::Font NumFont1
{
  attr fontname FontName = Book Antiqua;
  attr fontheight Height = 30;
  attr fontheightmode HeightMode = Popular;
  attr fontquality Quality = High;
  attr fontranges Ranges = 0x20-0xFF;
  attr fontaspectratio AspectRatio = 1.0;
  attr fontbold Bold = false;
  attr fontitalic Italic = false;
  attr fontkerning Kerning = true;
  attr fontrowdistance RowDistance;
}

$rect <220,370,420,410>
$output false
resource Resources::Bitmap BackBtn
{
  attr bitmapfile FileName = .\resources\back.png;
  attr bitmapformat Format = Native;
  attr framesize FrameSize = <70,70>;
  attr framedelay FrameDelay;
  attr bitmapdithering Dithering = Auto;
  attr bitmapmode Mode = Default;
}

$rect <-50,340,150,380>
inline Inline
{
  #include <iostream>
  #include <vector>
  #include <queue>

  int GetPriorityOfOperator(const char& op)
  {
      int priority = 0;
      switch (op)
      {
      case '+':
          priority = 1;
          break;
      case '-':
          priority = 1;
          break;
      case 'x':
          priority = 2;
          break;
      case '/':
          priority = 2;
          break;
      case '%':
          priority = 3;
          break;
      case '^':
          priority = 3;
          break;
      default:
          priority = 1;
          break;
      }

      return priority;
  }

  float ExecTwoOp(float first, float second, const char& op)
  {
      switch (op)
      {
      case '+':
          return first + second;
      case '-':
          return first - second;
      case 'x':
          return first * second;
      case '/':
      {
          if (second != 0)
              return first / second;
          else
          {
              if (first < 0.0)
              {
                  return -std::numeric_limits<float>::infinity();
              }
              else if (first > 0.0)
              {
                  return std::numeric_limits<float>::infinity();
              }
              else
              {
                  return std::numeric_limits<float>::quiet_NaN();
              }
          }
      }
      case '%':
      {
          float temp = first * second;
          return temp / 100;
      }
      case '^':
          return pow(first, second);
      default:
          return 0;
      }
  }

  std::vector<std::string> TokenizeExpression(const std::string& expression)
  {
      std::vector<std::string> tokens;
      int i = 0;

      while (i < expression.length()) 
      {
          if (isspace(expression[i]))
          {
              i++;
              continue;
          }

          if (isdigit(expression[i]) || (expression[i] == '.' && isdigit(expression[i + 1]))) 
          {
              std::string number;
              while (i < expression.length() && (isdigit(expression[i]) || expression[i] == '.')) 
              {
                  number += expression[i];
                  i++;
              }
              tokens.push_back(number);
          }
          else if (IsOperator(expression[i]) || IsParenthesis(expression[i]))
          {
              tokens.push_back(std::string(1, expression[i]));
              i++;
          }
          else 
          {
              i++;
          }
      }

      return tokens;
  }


  std::vector<std::string> ShuntingYardAlgorithm(const std::string& expression)
  {
      std::vector<std::string> tokens = TokenizeExpression(expression);
      std::queue<std::string> output;
      std::stack<std::string> operators;

      for (const std::string& token : tokens)
      {
          if (token.size() == 1)
          {
              char t = token[0];
              if (std::isdigit(t))
              {
                  output.push(token);
              }
              else if (IsOperator(t) || IsParenthesis(t))
              {
                  if (IsParenthesis(t))
                  {
                      if (t == '(')
                      {
                          operators.push("(");
                      }
                      else if (t == ')')
                      {
                          while (!operators.empty() && operators.top() != "(")
                          {
                              output.push(operators.top());
                              operators.pop();
                          }
                          if (!operators.empty())
                              operators.pop();
                      }
                  }
                  if (IsOperator(t))
                  {
                      if (!operators.empty())
                      {
                          char top = operators.top()[0];
                          if (IsOperator(top))
                          {
                              if (GetPriorityOfOperator(top) < GetPriorityOfOperator(t))
                              {
                                  operators.push(token);
                              }
                              else if (GetPriorityOfOperator(top) == GetPriorityOfOperator(t))
                              {
                                  output.push(operators.top());
                                  operators.pop();
                                  operators.push(token);
                              }
                          }
                          if (top == '(')
                          {
                              operators.push(token);
                          }

                      }
                      else
                          operators.push(token);
                  }
              }
          }
          else if (token.size() > 1 && IsNumber(token))
          {
              output.push(token);
          }
      }

      while (!operators.empty())
      {
          output.push(operators.top());
          operators.pop();
      }

      std::vector<std::string> expr;

      while (!output.empty())
      {
          expr.push_back(output.front());
          output.pop();
      }

      return expr;
  }


  XFloat EvaluateRPN(XString expression)
  {
      std::string expr = expression;
      std::vector<std::string> RPN = ShuntingYardAlgorithm(expr);
      std::stack<float> stk;
      int first, second;

      for (const std::string& token : RPN)
      {
          if (IsOperator(token[0]))
          {
  			second = stk.top();
  			stk.pop();
  			first = stk.top();
  			stk.pop();
  			stk.push(ExecTwoOp(first, second, token[0]));
  		}
          else
          {
  			stk.push(std::stof(token));
  		}
      }

      XFloat res = stk.top();
      return res;
  }
}

// Directives to adapt the order of the above members according to how these members 
// where arranged when the project content was stored. In this manner the storage 
// and the expected order of the members don't depend. Merging of changes in the 
// project files is simplified.
$member Inline
$member Application
$member NumFont
$member DigitalResFont
$member NumKeyBtns
$member CustomBtn
$member ResultTxtEd
$member EqualsBtn
$member EqFont
$member PercentBtn
$member PowBtn
$member Note
$member Note1
$member Note2
$member Note3
$member NumBoldFont
$member DivideBtn
$member MultiplyFont
$member Pair
$member MAX_SIZE
$member ErrorDialog
$member ErrorFont
$member BtnFont
$member OKBtn
$member ParenthesisBtn
$member NumFont1
$member BackBtn
